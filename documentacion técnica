### Documentación Técnica del Proyecto "Manager App"

#### Portada

**Manager App**  
**Fácil interfaz de gestión de bases de datos**  
**Malcolm Valdez**  
**Sábado, junio 9, 2024**  

---

#### Introducción

##### Antecedentes del Proyecto
El proyecto "Manager App" surge de la necesidad de contar con una herramienta eficiente y accesible para la gestión de empleados y departamentos dentro de una empresa. Una correcta gestión de los recursos humanos es crucial para el éxito organizacional, y una aplicación web bien diseñada puede facilitar enormemente esta tarea.

##### Objetivos
- **Desarrollar una aplicación web** que permita registrar, actualizar y eliminar información de empleados.
- **Implementar funcionalidades de autenticación y autorización** para asegurar la integridad de los datos.
- **Crear una interfaz de usuario intuitiva y responsiva** para mejorar la experiencia del usuario.
- **Incluir la capacidad de importar datos de empleados a través de archivos CSV** para facilitar la migración de datos.

##### Alcance
El proyecto se enfocará en las funcionalidades básicas de gestión de empleados y departamentos, incluyendo la autenticación de usuarios y la importación de datos. No se incluirán funcionalidades avanzadas como la gestión de nóminas o la integración con otros sistemas empresariales.

---

#### Metodología

##### Planificación
El proyecto se planificó en varias etapas, incluyendo la recolección de requisitos, el diseño del sistema, la implementación, las pruebas y el despliegue. Cada etapa se gestionó utilizando metodologías ágiles para asegurar una adaptación rápida a los cambios y una entrega continua de valor.

##### Herramientas y Tecnologías
- **Lenguajes de programación:** PHP, JavaScript
- **Base de datos:** MySQL
- **Frameworks:** Bootstrap para facilitar la construcción de la interfaz de usuario
- **Herramientas de desarrollo:** XAMPP para el servidor local, MySQL 8.2 Community, Visual Studio Code, MySQL Workbench, TablePlus

##### Proceso de Desarrollo
1. **Recolección:** Identificación de las necesidades del usuario y definición de las funcionalidades clave.
2. **Diseño del Sistema:** Creación de diagramas de arquitectura y diseño de la base de datos.
3. **Implementación:** Desarrollo de las funcionalidades principales, incluyendo la autenticación de usuarios, la gestión de empleados y departamentos, y la importación de datos.
4. **Pruebas:** Verificación de la funcionalidad del sistema mediante casos de prueba específicos.
5. **Despliegue:** Configuración del sistema para su hospedaje en línea y presentación.

---

#### Implementación

##### Arquitectura del Sistema
El sistema está compuesto por una aplicación web desarrollada en PHP que se comunica con una base de datos MySQL. La interfaz de usuario está diseñada utilizando HTML, CSS y Bootstrap, y se asegura la interacción con la base de datos mediante consultas SQL y scripts PHP.

###### Diagrama de Arquitectura

```
+--------------------+       +-----------------------+
|                    |       |                       |
|   Interfaz Web     | <---> |   Servidor PHP        |
|(HTML/CSS/Bootstrap)|       | (Lógica de Negocio)   |
|                    |       |                       |
+--------------------+       +-----------------------+
                                  |
                                  |
                                  V
                        +-----------------+
                        |   Base de Datos |
                        |     MySQL       |
                        +-----------------+
```

##### Diseño de Base de Datos
La base de datos está diseñada para almacenar información relevante sobre los usuarios, empleados y departamentos. Las principales tablas son:

1. **Tabla Usuarios**
   - **id**: INT, AUTO_INCREMENT, PRIMARY KEY
   - **username**: VARCHAR(50), UNIQUE
   - **password**: VARCHAR(255)

2. **Tabla Empleados**
   - **id**: INT, AUTO_INCREMENT, PRIMARY KEY
   - **nombre**: VARCHAR(100)
   - **correo_electronico**: VARCHAR(100)
   - **telefono**: VARCHAR(15)
   - **departamento_id**: INT, FOREIGN KEY REFERENCES Departamentos(id)
   - **rol**: VARCHAR(50)

3. **Tabla Departamentos**
   - **id**: INT, AUTO_INCREMENT, PRIMARY KEY
   - **nombre**: VARCHAR(100)

##### Características
- **Autenticación de Usuarios**
  - Registro, inicio de sesión y cierre de sesión de usuarios.
  - Uso de `password_hash()` para almacenar contraseñas de forma segura.
  - Manejo de sesiones PHP para mantener el estado de autenticación del usuario.
  
- **Gestión de Empleados**
  - Crear, leer, actualizar y eliminar registros de empleados.
  - Validación y saneamiento de datos para prevenir errores y vulnerabilidades.

- **Gestión de Departamentos**
  - Crear, leer, actualizar y eliminar departamentos.
  - Relación entre empleados y departamentos para una organización jerárquica.

- **Importación de Datos**
  - Importar datos de empleados desde archivos CSV.
  - Validación exhaustiva de los datos importados para asegurar su integridad y consistencia.

###### Código Ejemplo: Registro de Usuario
```php
<?php
include 'db.php';

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $username = $_POST['username'];
    $password = $_POST['password'];
    $confirm_password = $_POST['confirm_password'];

    if ($password == $confirm_password) {
        $hashed_password = password_hash($password, PASSWORD_DEFAULT);

        $sql = "INSERT INTO users (username, password) VALUES (?, ?)";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param('ss', $username, $hashed_password);

        if ($stmt->execute()) {
            header('Location: index.php');
        } else {
            echo 'Error: ' . $conn->error;
        }
    } else {
        echo 'Passwords do not match';
    }
}
?>
```

---

#### Consideraciones de Seguridad

1. **Hashing de Contraseñas**
   - Utilización de `password_hash()` para almacenar contraseñas de manera segura y `password_verify()` para verificar las contraseñas ingresadas por los usuarios.
   
2. **Gestión de Sesiones**
   - Uso de sesiones PHP para manejar el estado de autenticación del usuario, asegurando que las sesiones sean seguras y expiradas correctamente.

3. **Validación y Saneamiento de Datos**
   - Validación de todos los datos de entrada para asegurar que sean del tipo y formato esperados.
   - Uso de consultas preparadas para prevenir inyecciones SQL.
   - Escapado de salidas para prevenir ataques de Cross-Site Scripting (XSS).

---

#### Pruebas

##### Casos de Prueba

1. **Autenticación de Usuarios**
   - Verificación de registro, inicio de sesión y cierre de sesión.
   - Pruebas de resistencia contra intentos de acceso no autorizado.

2. **Gestión de Empleados**
   - Verificación de las operaciones de creación, lectura, actualización y eliminación de empleados.
   - Pruebas de validación de datos y manejo de errores.

3. **Importación de Datos**
   - Verificación de la correcta importación de datos desde archivos CSV.
   - Manejo de errores y validación de datos importados.

##### Resultados
Durante el proceso de pruebas, se identificaron y resolvieron varios problemas, incluyendo errores en la validación de datos y problemas de diseño en la interfaz de usuario. Los resultados de las pruebas confirmaron que el sistema funciona según lo esperado y que todas las funcionalidades clave están operativas.

---

#### Conclusión

##### Resumen
El proyecto "Manager App" ha logrado desarrollar una aplicación web funcional y eficiente para la gestión de empleados y departamentos. Se ha implementado una interfaz de usuario intuitiva y responsiva, y se han incorporado medidas de seguridad robustas para proteger los datos del usuario.

##### Desafíos y Soluciones
- **Desafío:** Integrar la funcionalidad de importación de datos desde archivos CSV.
  - **Solución:** Utilizar PHP para manejo de archivos y realizar una validación exhaustiva de los datos importados.
  
- **Desafío:** Asegurar la seguridad de las contraseñas de los usuarios.
  - **Solución:** Implementar el hashing de contraseñas y utilizar sesiones PHP para la gestión segura de la autenticación de usuarios.

##### Trabajo Futuro
- **Mejoras en la Interfaz de Usuario:** Incluir más elementos de diseño interactivos y mejorar la accesibilidad.
- **Funcionalidades Adicionales:** Implementar la gestión de nóminas y la integración con otros sistemas empresariales.
- **Optimización de Rendimiento:** Mejorar la eficiencia de las consultas a la base de datos y optimizar el rendimiento general del sistema.

---

### Preguntas de Presentación

1. **¿Cuáles fueron los aspectos más desafiantes o lo que más lo sorprendió en este proyecto?**
   - Los aspectos más desafiantes fueron la integración de la funcionalidad de importación de datos desde archivos CSV y la implementación de medidas de seguridad robustas para proteger los datos del usuario.

2. **¿Cuál es el propósito de tu página?**
   - El propósito de la página es proporcionar una herramienta eficiente y accesible para la gestión de empleados y departamentos dentro de una empresa.

3. **¿Qué diferencia tiene tu página a las otras?**
   - La diferencia principal de nuestra página es su enfoque en una interfaz de usuario intuitiva y responsiva, junto con funcionalidades clave como la autenticación segura de usuarios y la capacidad de importar datos de empleados desde archivos CSV.

---

Este documento proporciona una visión detallada y comprensiva del proyecto "Manager App", cubriendo

 todos los aspectos desde la planificación hasta la implementación y pruebas.
